name: reusable-dotnet-cd-nuget

on:
  workflow_call:
    inputs:
      SOLUTION_FILE_PATH:
        type: string
        required: true
      CSPROJ_PATH:
        required: true
        type: string
      DOTNET_VERSION:
        required: false
        type: string
      NUGET_PACKAGE_VERSION:
        required: true
        type: string
      PACKAGE_SOURCE:
        required: true
        type: string
        default: 'https://api.nuget.org/v3/index.json'
      INTERNAL_NUGET_FEED:
        type: string
        required: false
      RELEASE_NOTES_PATH:
        type: string
        required: false

permissions:
  id-token: write
  contents: write

jobs:
  dotnet-cd-nuget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      - name: Add GitHub Packages NuGet source
        if: ${{ inputs.INTERNAL_NUGET_FEED != '' }}
        run: |
          dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ inputs.INTERNAL_NUGET_FEED }}/index.json"

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.CSPROJ_PATH }}

      - name: Build with dotnet
        run: dotnet build ${{ inputs.CSPROJ_PATH }} --configuration Release --no-restore

      - name: Test
        run: dotnet test ${{ inputs.SOLUTION_FILE_PATH }} --no-restore --blame-hang-timeout 60000 --blame

      - name: Pack with dotnet
        run: dotnet pack ${{ inputs.CSPROJ_PATH }} --configuration Release --output nupkgs /p:PackageVersion=${{ inputs.NUGET_PACKAGE_VERSION }}

      - name: Publish to NuGet
        run: dotnet nuget push nupkgs/*.nupkg --source ${{ inputs.PACKAGE_SOURCE }} --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Create and Push Git Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ inputs.NUGET_PACKAGE_VERSION }}
          git push origin v${{ inputs.NUGET_PACKAGE_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Construct Release Notes
        id: release_notes
        run: |
          if [ -n "${{ inputs.RELEASE_NOTES_PATH }}" ] && [ -f "${{ inputs.RELEASE_NOTES_PATH }}" ]; then
            cat "${{ inputs.RELEASE_NOTES_PATH }}" > release-body.md
          else
            echo "### Automated Release" > release-body.md
            echo "This release was automated and contains updates." >> release-body.md
          fi
          # Use multiline syntax for GitHub Actions
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat release-body.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.NUGET_PACKAGE_VERSION }}
          name: Release v${{ inputs.NUGET_PACKAGE_VERSION }}
          body: ${{ env.RELEASE_BODY }}
